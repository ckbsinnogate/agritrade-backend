# Generated by Django 5.1.6 on 2025-07-05 03:37

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ProcessingRecipe',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('recipe_name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('skill_level_required', models.CharField(choices=[('basic', 'Basic'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='basic', max_length=20)),
                ('processing_time_minutes', models.PositiveIntegerField(help_text='Total processing time in minutes')),
                ('input_materials', models.JSONField(default=list, help_text='List of input materials with quantities')),
                ('processing_steps', models.JSONField(default=list, help_text='Detailed step-by-step processing instructions')),
                ('equipment_required', models.JSONField(default=list, help_text='List of required equipment and tools')),
                ('output_products', models.JSONField(default=list, help_text='Expected output products with quantities')),
                ('expected_yield_percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('quality_checkpoints', models.JSONField(default=list, help_text='Quality control checkpoints during processing')),
                ('quality_standards', models.JSONField(default=dict, help_text='Quality standards and specifications')),
                ('processing_cost_per_unit', models.DecimalField(blank=True, decimal_places=2, help_text='Processing cost per unit in GHS', max_digits=10, null=True)),
                ('labor_hours_required', models.DecimalField(blank=True, decimal_places=2, help_text='Labor hours required for processing', max_digits=8, null=True)),
                ('energy_consumption', models.DecimalField(blank=True, decimal_places=2, help_text='Energy consumption in kWh per unit', max_digits=8, null=True)),
                ('water_usage_liters', models.DecimalField(blank=True, decimal_places=2, help_text='Water usage in liters', max_digits=10, null=True)),
                ('waste_generation_kg', models.DecimalField(blank=True, decimal_places=2, help_text='Waste generation in kg', max_digits=8, null=True)),
                ('certifications_achieved', models.JSONField(default=list, help_text='Certifications achieved using this recipe')),
                ('compliance_standards', models.JSONField(default=list, help_text='Compliance standards met')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('public', 'Public'), ('verified', 'Verified'), ('deprecated', 'Deprecated')], default='draft', max_length=20)),
                ('is_public', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_date', models.DateTimeField(blank=True, null=True)),
                ('times_used', models.PositiveIntegerField(default=0)),
                ('success_rate_percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('average_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('rating_count', models.PositiveIntegerField(default=0)),
                ('tags', models.JSONField(default=list, help_text='Recipe tags for categorization')),
                ('seasonal_availability', models.BooleanField(default=False)),
                ('available_seasons', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('processor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='processing_recipes', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_recipes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProcessorProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('business_name', models.CharField(max_length=200)),
                ('business_registration_number', models.CharField(blank=True, max_length=100)),
                ('processor_type', models.CharField(choices=[('mill', 'Milling'), ('oil_extraction', 'Oil Extraction'), ('food_processing', 'Food Processing'), ('packaging', 'Packaging'), ('drying', 'Drying'), ('sorting', 'Sorting & Grading'), ('storage', 'Storage & Warehousing'), ('multi_purpose', 'Multi-Purpose')], max_length=30)),
                ('specializations', models.JSONField(default=list, help_text='List of processing specializations')),
                ('processing_capabilities', models.JSONField(default=list, help_text='List of processing capabilities')),
                ('daily_processing_capacity', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('capacity_unit', models.CharField(default='kg', max_length=20)),
                ('equipment_list', models.JSONField(default=list)),
                ('certifications', models.JSONField(default=list)),
                ('health_permits', models.JSONField(default=list)),
                ('quality_standards', models.JSONField(default=list)),
                ('location', models.JSONField(default=dict, help_text='Location coordinates and address')),
                ('service_radius_km', models.PositiveIntegerField(default=50)),
                ('operating_hours', models.JSONField(default=dict)),
                ('seasonal_operation', models.BooleanField(default=False)),
                ('operating_seasons', models.JSONField(default=list)),
                ('is_verified', models.BooleanField(default=False)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('verification_documents', models.JSONField(default=list)),
                ('total_recipes_shared', models.PositiveIntegerField(default=0)),
                ('average_recipe_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('total_processing_orders', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='processor_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RecipeComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('is_question', models.BooleanField(default=False)),
                ('is_answered', models.BooleanField(default=False)),
                ('helpful_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='processors.recipecomment')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='processors.processingrecipe')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipe_comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RecipeRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('clarity_rating', models.PositiveIntegerField(help_text='How clear and easy to follow are the instructions', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('effectiveness_rating', models.PositiveIntegerField(help_text='How effective is this recipe in achieving results', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('accuracy_rating', models.PositiveIntegerField(help_text='How accurate are the yield and time estimates', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('review_title', models.CharField(blank=True, max_length=200)),
                ('review_content', models.TextField(blank=True)),
                ('actual_yield_achieved', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('processing_time_actual', models.PositiveIntegerField(blank=True, help_text='Actual processing time experienced in minutes', null=True)),
                ('would_recommend', models.BooleanField(default=True)),
                ('improvement_suggestions', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='processors.processingrecipe')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipe_ratings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RecipeUsageLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('used_at', models.DateTimeField(auto_now_add=True)),
                ('processing_facility', models.CharField(blank=True, max_length=200)),
                ('batch_size', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('success', models.BooleanField(default=True)),
                ('actual_yield', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('processing_time_actual', models.PositiveIntegerField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('issues_encountered', models.TextField(blank=True)),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_logs', to='processors.processingrecipe')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipe_usage', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-used_at'],
            },
        ),
        migrations.AddIndex(
            model_name='processingrecipe',
            index=models.Index(fields=['processor', '-created_at'], name='processors__process_8fefc5_idx'),
        ),
        migrations.AddIndex(
            model_name='processingrecipe',
            index=models.Index(fields=['status', 'is_public'], name='processors__status_83957d_idx'),
        ),
        migrations.AddIndex(
            model_name='processingrecipe',
            index=models.Index(fields=['skill_level_required'], name='processors__skill_l_b8f14d_idx'),
        ),
        migrations.AddIndex(
            model_name='processingrecipe',
            index=models.Index(fields=['-average_rating'], name='processors__average_47cd6d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='reciperating',
            unique_together={('recipe', 'user')},
        ),
    ]
