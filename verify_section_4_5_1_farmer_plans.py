#!/usr/bin/env python3
"""
Section 4.5.1 Farmer Subscription Plans - Implementation Verification
Check if all required farmer subscription plans are implemented according to PRD
"""

import os
import sys
import django

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'agriconnect.settings')
django.setup()

def verify_farmer_subscription_plans():
    """Verify specific farmer subscription plans from Section 4.5.1"""
    print("üåæ Verifying Section 4.5.1 Farmer Subscription Plans...")
    
    try:
        from subscriptions.models import SubscriptionPlan
        
        # PRD Section 4.5.1 Required Plans
        required_farmer_plans = {
            'basic': {
                'name_keywords': ['basic', 'free'],
                'features': ['free listing', 'transaction fees'],
                'description': 'Free listing with transaction fees'
            },
            'professional': {
                'name_keywords': ['professional', 'premium'],
                'features': ['premium features', 'analytics', 'priority support'],
                'description': 'Premium features, analytics, and priority support'
            },
            'enterprise': {
                'name_keywords': ['enterprise', 'unlimited'],
                'features': ['unlimited listings', 'api access', 'dedicated support'],
                'description': 'Unlimited listings, API access, and dedicated support'
            },
            'cooperative': {
                'name_keywords': ['cooperative', 'group', 'multi-farmer'],
                'features': ['group management', 'bulk features', 'multi-farmer'],
                'description': 'Multi-farmer group management and bulk features'
            }
        }
        
        # Get all farmer subscription plans
        farmer_plans = SubscriptionPlan.objects.filter(
            plan_type='farmer',
            is_active=True
        ).order_by('tier', 'price')
        
        print(f"\nüìä Found {farmer_plans.count()} active farmer subscription plans:")
        
        implemented_plans = {}
        for plan in farmer_plans:
            print(f"\n‚úÖ Plan: {plan.name}")
            print(f"   ‚Ä¢ Type: {plan.plan_type}")
            print(f"   ‚Ä¢ Tier: {plan.tier}")
            print(f"   ‚Ä¢ Price: {plan.currency} {plan.price}")
            print(f"   ‚Ä¢ Billing: {plan.billing_cycle}")
            print(f"   ‚Ä¢ Description: {plan.description}")
            print(f"   ‚Ä¢ Features: {plan.features}")
            
            # Analyze plan features
            plan_text = f"{plan.name} {plan.description} {plan.features}".lower()
            
            # Check which required plan this might match
            for plan_type, requirements in required_farmer_plans.items():
                if any(keyword in plan_text for keyword in requirements['name_keywords']):
                    if plan_type not in implemented_plans:
                        implemented_plans[plan_type] = []
                    implemented_plans[plan_type].append(plan)
        
        # Verify each required plan type
        print(f"\nüéØ PRD Section 4.5.1 Compliance Check:")
        
        compliance_status = {}
        for plan_type, requirements in required_farmer_plans.items():
            print(f"\nüìã {plan_type.title()} Plan Requirements:")
            print(f"   ‚Ä¢ Description: {requirements['description']}")
            print(f"   ‚Ä¢ Required Features: {', '.join(requirements['features'])}")
            
            if plan_type in implemented_plans:
                matching_plans = implemented_plans[plan_type]
                print(f"   ‚úÖ Status: IMPLEMENTED ({len(matching_plans)} plan(s) found)")
                
                for plan in matching_plans:
                    print(f"      ‚Üí {plan.name} ({plan.tier})")
                    
                    # Check specific features for each plan type
                    feature_compliance = check_plan_features(plan, plan_type)
                    if feature_compliance:
                        print(f"      ‚úÖ Feature compliance: PASSED")
                    else:
                        print(f"      ‚ö†Ô∏è Feature compliance: PARTIAL")
                
                compliance_status[plan_type] = True
            else:
                print(f"   ‚ùå Status: NOT FOUND")
                print(f"      Missing plan matching: {', '.join(requirements['name_keywords'])}")
                compliance_status[plan_type] = False
        
        return compliance_status, farmer_plans
        
    except Exception as e:
        print(f"‚ùå Error verifying farmer plans: {e}")
        import traceback
        traceback.print_exc()
        return {}, []

def check_plan_features(plan, plan_type):
    """Check if a plan has the required features for its type"""
    try:
        # Basic Plan Requirements
        if plan_type == 'basic':
            # Should be free or very low cost
            is_free_or_low_cost = plan.price <= 10  # Allow up to 10 for "basic"
            has_transaction_fees = plan.transaction_fee_percentage > 0
            has_limited_listings = plan.product_listing_limit and plan.product_listing_limit <= 10
            
            print(f"         ‚Ä¢ Free/Low Cost: {'‚úÖ' if is_free_or_low_cost else '‚ùå'} (Price: {plan.currency} {plan.price})")
            print(f"         ‚Ä¢ Transaction Fees: {'‚úÖ' if has_transaction_fees else '‚ùå'} ({plan.transaction_fee_percentage}%)")
            print(f"         ‚Ä¢ Limited Listings: {'‚úÖ' if has_limited_listings else '‚ùå'} ({plan.product_listing_limit})")
            
            return is_free_or_low_cost and has_transaction_fees
            
        # Professional Plan Requirements
        elif plan_type == 'professional':
            has_analytics = plan.analytics_access
            has_priority_support = plan.priority_support
            has_more_listings = plan.product_listing_limit and plan.product_listing_limit > 10
            
            print(f"         ‚Ä¢ Analytics Access: {'‚úÖ' if has_analytics else '‚ùå'}")
            print(f"         ‚Ä¢ Priority Support: {'‚úÖ' if has_priority_support else '‚ùå'}")
            print(f"         ‚Ä¢ More Listings: {'‚úÖ' if has_more_listings else '‚ùå'} ({plan.product_listing_limit})")
            
            return has_analytics and has_priority_support
            
        # Enterprise Plan Requirements
        elif plan_type == 'enterprise':
            has_api_access = plan.api_access
            has_unlimited_listings = plan.product_listing_limit == 0 or plan.product_listing_limit >= 1000
            has_premium_features = plan.blockchain_features or plan.marketing_tools
            
            print(f"         ‚Ä¢ API Access: {'‚úÖ' if has_api_access else '‚ùå'}")
            print(f"         ‚Ä¢ Unlimited Listings: {'‚úÖ' if has_unlimited_listings else '‚ùå'} ({plan.product_listing_limit})")
            print(f"         ‚Ä¢ Premium Features: {'‚úÖ' if has_premium_features else '‚ùå'}")
            
            return has_api_access and has_unlimited_listings
            
        # Cooperative Plan Requirements
        elif plan_type == 'cooperative':
            # Check if plan mentions group/bulk features
            plan_text = f"{plan.name} {plan.description} {plan.features}".lower()
            has_group_features = any(word in plan_text for word in ['group', 'cooperative', 'bulk', 'multi'])
            has_api_access = plan.api_access  # Needed for group management
            has_high_limits = plan.product_listing_limit == 0 or plan.product_listing_limit >= 100
            
            print(f"         ‚Ä¢ Group Features: {'‚úÖ' if has_group_features else '‚ùå'}")
            print(f"         ‚Ä¢ API Access: {'‚úÖ' if has_api_access else '‚ùå'}")
            print(f"         ‚Ä¢ High Limits: {'‚úÖ' if has_high_limits else '‚ùå'} ({plan.product_listing_limit})")
            
            return has_group_features and has_high_limits
            
        return True
        
    except Exception as e:
        print(f"         ‚ùå Error checking features: {e}")
        return False

def suggest_missing_plans(compliance_status):
    """Suggest what plans need to be created or updated"""
    print(f"\nüîß RECOMMENDATIONS:")
    
    missing_plans = [plan_type for plan_type, implemented in compliance_status.items() if not implemented]
    
    if not missing_plans:
        print("   ‚úÖ All required farmer subscription plans are implemented!")
        return
    
    print(f"   ‚ö†Ô∏è Missing or incomplete plans: {len(missing_plans)}")
    
    for plan_type in missing_plans:
        if plan_type == 'basic':
            print(f"\n   üìù Create Basic Plan:")
            print(f"      ‚Ä¢ Name: 'Farmer Basic' or 'Free Farmer Plan'")
            print(f"      ‚Ä¢ Price: GHS 0.00 (free)")
            print(f"      ‚Ä¢ Tier: 'basic'")
            print(f"      ‚Ä¢ Features: 5-10 free listings")
            print(f"      ‚Ä¢ Transaction fee: 3-5%")
            print(f"      ‚Ä¢ Limited support")
            
        elif plan_type == 'professional':
            print(f"\n   üìù Create Professional Plan:")
            print(f"      ‚Ä¢ Name: 'Farmer Professional' or 'Premium Farmer'")
            print(f"      ‚Ä¢ Price: GHS 50-100/month")
            print(f"      ‚Ä¢ Tier: 'professional'")
            print(f"      ‚Ä¢ Features: Analytics, priority support")
            print(f"      ‚Ä¢ 50-100 listings")
            print(f"      ‚Ä¢ Lower transaction fees")
            
        elif plan_type == 'enterprise':
            print(f"\n   üìù Create Enterprise Plan:")
            print(f"      ‚Ä¢ Name: 'Farmer Enterprise' or 'Unlimited Farmer'")
            print(f"      ‚Ä¢ Price: GHS 200-500/month")
            print(f"      ‚Ä¢ Tier: 'enterprise'")
            print(f"      ‚Ä¢ Features: API access, unlimited listings")
            print(f"      ‚Ä¢ Dedicated support")
            print(f"      ‚Ä¢ Advanced analytics")
            
        elif plan_type == 'cooperative':
            print(f"\n   üìù Create Cooperative Plan:")
            print(f"      ‚Ä¢ Name: 'Farmer Cooperative' or 'Group Plan'")
            print(f"      ‚Ä¢ Price: GHS 300-1000/month")
            print(f"      ‚Ä¢ Tier: 'enterprise' or 'cooperative'")
            print(f"      ‚Ä¢ Features: Multi-farmer management")
            print(f"      ‚Ä¢ Bulk operations")
            print(f"      ‚Ä¢ Group analytics")

def display_section_4_5_1_summary(compliance_status, farmer_plans):
    """Display Section 4.5.1 implementation summary"""
    print("\n" + "="*70)
    print("üéØ SECTION 4.5.1 FARMER SUBSCRIPTION PLANS - VERIFICATION")
    print("="*70)
    
    total_required = len(compliance_status)
    implemented_count = sum(1 for status in compliance_status.values() if status)
    compliance_percentage = (implemented_count / total_required) * 100 if total_required > 0 else 0
    
    print(f"\nüìä IMPLEMENTATION STATUS:")
    print(f"   ‚Ä¢ Total Required Plans: {total_required}")
    print(f"   ‚Ä¢ Implemented Plans: {implemented_count}")
    print(f"   ‚Ä¢ Available Farmer Plans: {len(farmer_plans)}")
    print(f"   ‚Ä¢ Compliance Percentage: {compliance_percentage:.1f}%")
    
    print(f"\nüìã PLAN-BY-PLAN STATUS:")
    for plan_type, implemented in compliance_status.items():
        status_icon = "‚úÖ" if implemented else "‚ùå"
        print(f"   {status_icon} {plan_type.title()} Plan: {'IMPLEMENTED' if implemented else 'MISSING'}")
    
    print(f"\nüéØ SECTION 4.5.1 COMPLIANCE:")
    
    if compliance_percentage == 100:
        print("   üèÜ 100% COMPLIANCE ACHIEVED")
        print("   ‚úÖ All required farmer subscription plans implemented")
        print("   ‚úÖ Basic plan with free listings and transaction fees")
        print("   ‚úÖ Professional plan with premium features and analytics")
        print("   ‚úÖ Enterprise plan with unlimited listings and API access")
        print("   ‚úÖ Cooperative plan with multi-farmer group management")
        print("   ‚úÖ Ready for farmer onboarding and subscription management")
    elif compliance_percentage >= 75:
        print("   üü° MOSTLY COMPLIANT")
        print("   ‚úÖ Most required plans implemented")
        print("   ‚ö†Ô∏è Some plans may need feature enhancements")
    elif compliance_percentage >= 50:
        print("   üü† PARTIAL COMPLIANCE")
        print("   ‚ö†Ô∏è Several required plans missing or incomplete")
        print("   üìù Plan creation/updates needed")
    else:
        print("   üî¥ LOW COMPLIANCE")
        print("   ‚ùå Most required plans missing")
        print("   üìù Significant implementation work required")
    
    return compliance_percentage >= 100

def main():
    """Main verification function"""
    print("üîç Starting Section 4.5.1 Farmer Subscription Plans Verification...")
    
    try:
        compliance_status, farmer_plans = verify_farmer_subscription_plans()
        suggest_missing_plans(compliance_status)
        
        is_compliant = display_section_4_5_1_summary(compliance_status, farmer_plans)
        
        if is_compliant:
            print("\n‚úÖ Section 4.5.1 verification completed successfully!")
            print("üéâ All farmer subscription plans are properly implemented!")
        else:
            print("\n‚ö†Ô∏è Section 4.5.1 verification found gaps")
            print("Some farmer subscription plans need attention")
        
    except Exception as e:
        print(f"\n‚ùå Verification error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main()
