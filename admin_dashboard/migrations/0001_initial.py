# Generated by Django 5.1.6 on 2025-08-03 04:54

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SystemHealthCheck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_name', models.CharField(max_length=100)),
                ('service_type', models.CharField(choices=[('DATABASE', 'Database'), ('REDIS', 'Redis Cache'), ('EMAIL', 'Email Service'), ('SMS', 'SMS Service'), ('PAYMENT', 'Payment Gateway'), ('STORAGE', 'File Storage'), ('API', 'External API'), ('QUEUE', 'Background Queue')], max_length=20)),
                ('status', models.CharField(choices=[('HEALTHY', 'Healthy'), ('WARNING', 'Warning'), ('CRITICAL', 'Critical'), ('DOWN', 'Down')], max_length=20)),
                ('response_time', models.FloatField(help_text='Response time in milliseconds')),
                ('error_message', models.TextField(blank=True)),
                ('metadata', models.JSONField(default=dict)),
                ('checked_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-checked_at'],
            },
        ),
        migrations.CreateModel(
            name='AdminActionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('USER_CREATE', 'User Created'), ('USER_UPDATE', 'User Updated'), ('USER_DELETE', 'User Deleted'), ('USER_VERIFY', 'User Verified'), ('USER_SUSPEND', 'User Suspended'), ('SETTING_CHANGE', 'Setting Changed'), ('CONTENT_MODERATE', 'Content Moderated'), ('SYSTEM_MAINTENANCE', 'System Maintenance'), ('REPORT_GENERATE', 'Report Generated'), ('POLICY_UPDATE', 'Policy Updated')], max_length=20)),
                ('description', models.CharField(max_length=200)),
                ('details', models.JSONField(default=dict)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('admin_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admin_actions', to=settings.AUTH_USER_MODEL)),
                ('target_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='admin_actions_received', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='AdminPreferences',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dashboard_layout', models.JSONField(default=dict)),
                ('notification_settings', models.JSONField(default=dict)),
                ('theme_settings', models.JSONField(default=dict)),
                ('default_filters', models.JSONField(default=dict)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('language', models.CharField(default='en', max_length=10)),
                ('items_per_page', models.IntegerField(default=25)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('admin_user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='admin_preferences', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AnalyticsSnapshot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('total_users', models.IntegerField()),
                ('active_users', models.IntegerField()),
                ('new_registrations', models.IntegerField()),
                ('total_orders', models.IntegerField()),
                ('total_revenue', models.DecimalField(decimal_places=2, max_digits=15)),
                ('total_products', models.IntegerField()),
                ('total_transactions', models.IntegerField()),
                ('platform_usage_hours', models.FloatField()),
                ('api_requests', models.IntegerField()),
                ('errors_count', models.IntegerField()),
                ('conversion_rate', models.FloatField()),
                ('metadata', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('date',)},
            },
        ),
        migrations.CreateModel(
            name='ContentModerationQueue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(choices=[('USER_PROFILE', 'User Profile'), ('PRODUCT', 'Product Listing'), ('REVIEW', 'Product Review'), ('COMMENT', 'Comment'), ('IMAGE', 'Image Upload'), ('RECIPE', 'Processing Recipe'), ('ADVERTISEMENT', 'Advertisement')], max_length=20)),
                ('content_id', models.CharField(max_length=100)),
                ('content_title', models.CharField(max_length=200)),
                ('content_preview', models.TextField()),
                ('status', models.CharField(choices=[('PENDING', 'Pending Review'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('FLAGGED', 'Flagged for Admin'), ('SPAM', 'Marked as Spam')], default='PENDING', max_length=20)),
                ('moderation_notes', models.TextField(blank=True)),
                ('priority', models.IntegerField(default=5, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('auto_flagged', models.BooleanField(default=False)),
                ('flag_reasons', models.JSONField(default=list)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('moderated_at', models.DateTimeField(blank=True, null=True)),
                ('moderated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderated_content', to=settings.AUTH_USER_MODEL)),
                ('submitted_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submitted_content', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['priority', '-submitted_at'],
            },
        ),
        migrations.CreateModel(
            name='ContentPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('policy_type', models.CharField(choices=[('GENERAL', 'General Content'), ('PRODUCT', 'Product Listings'), ('REVIEWS', 'Reviews and Ratings'), ('IMAGES', 'Image Content'), ('SPAM', 'Spam Detection'), ('SAFETY', 'Safety Guidelines')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('rules', models.JSONField()),
                ('auto_enforcement', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CustomAnalyticsReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('report_type', models.CharField(choices=[('USER', 'User Analytics'), ('SALES', 'Sales Analytics'), ('PRODUCT', 'Product Analytics'), ('ENGAGEMENT', 'Engagement Analytics'), ('FINANCIAL', 'Financial Analytics'), ('CUSTOM', 'Custom Query')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('query_config', models.JSONField()),
                ('is_scheduled', models.BooleanField(default=False)),
                ('schedule_frequency', models.CharField(blank=True, max_length=20)),
                ('is_public', models.BooleanField(default=False)),
                ('last_generated', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SystemMaintenanceLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('maintenance_type', models.CharField(choices=[('UPDATE', 'System Update'), ('PATCH', 'Security Patch'), ('MIGRATION', 'Database Migration'), ('CLEANUP', 'Data Cleanup'), ('BACKUP', 'System Backup'), ('RESTORE', 'System Restore'), ('CONFIG', 'Configuration Change')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('started_at', models.DateTimeField()),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('was_successful', models.BooleanField(default=True)),
                ('affected_services', models.JSONField(default=list)),
                ('downtime_minutes', models.IntegerField(default=0)),
                ('notes', models.TextField(blank=True)),
                ('performed_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='UserSecurityEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('SUSPICIOUS_LOGIN', 'Suspicious Login Attempt'), ('MULTIPLE_FAILURES', 'Multiple Login Failures'), ('PASSWORD_RESET', 'Password Reset Request'), ('ACCOUNT_LOCKED', 'Account Locked'), ('UNUSUAL_ACTIVITY', 'Unusual Activity Detected'), ('DATA_BREACH', 'Potential Data Breach'), ('ADMIN_ACTION', 'Administrative Action')], max_length=20)),
                ('severity', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('CRITICAL', 'Critical')], max_length=10)),
                ('description', models.CharField(max_length=200)),
                ('details', models.JSONField(default=dict)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('is_resolved', models.BooleanField(default=False)),
                ('resolution_notes', models.TextField(blank=True)),
                ('occurred_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_security_events', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='security_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-occurred_at'],
            },
        ),
        migrations.CreateModel(
            name='SystemSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('GENERAL', 'General Settings'), ('SECURITY', 'Security Configuration'), ('EMAIL', 'Email Configuration'), ('SMS', 'SMS Configuration'), ('PAYMENT', 'Payment Settings'), ('API', 'API Configuration'), ('FEATURE', 'Feature Toggles'), ('NOTIFICATION', 'Notification Settings')], max_length=20)),
                ('key', models.CharField(max_length=100)),
                ('value', models.TextField()),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_public', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_settings', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='updated_settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['category', 'key'],
                'unique_together': {('category', 'key')},
            },
        ),
        migrations.CreateModel(
            name='UserActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('LOGIN', 'User Login'), ('LOGOUT', 'User Logout'), ('PROFILE_UPDATE', 'Profile Update'), ('PASSWORD_CHANGE', 'Password Change'), ('ORDER_PLACED', 'Order Placed'), ('PRODUCT_CREATED', 'Product Created'), ('REVIEW_POSTED', 'Review Posted'), ('PAYMENT_MADE', 'Payment Made'), ('SUPPORT_TICKET', 'Support Ticket'), ('VIOLATION', 'Policy Violation')], max_length=20)),
                ('description', models.CharField(max_length=200)),
                ('details', models.JSONField(default=dict)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('session_id', models.CharField(blank=True, max_length=100)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activity_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['user', '-timestamp'], name='admin_dashb_user_id_0f508b_idx'), models.Index(fields=['activity_type', '-timestamp'], name='admin_dashb_activit_c8dac2_idx')],
            },
        ),
    ]
