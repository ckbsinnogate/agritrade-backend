# Generated by Django 5.1.6 on 2025-07-09 03:12

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AIConversation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('conversation_type', models.CharField(choices=[('crop_advisory', 'Crop Advisory'), ('disease_detection', 'Disease Detection'), ('market_inquiry', 'Market Inquiry'), ('general_farming', 'General Farming'), ('weather_query', 'Weather Query'), ('pest_control', 'Pest Control'), ('soil_management', 'Soil Management'), ('irrigation', 'Irrigation'), ('harvesting', 'Harvesting'), ('storage', 'Storage')], max_length=30)),
                ('language', models.CharField(choices=[('en', 'English'), ('tw', 'Twi'), ('ga', 'Ga'), ('ee', 'Ewe'), ('ha', 'Hausa'), ('yo', 'Yoruba'), ('ig', 'Igbo'), ('fr', 'French')], default='en', max_length=5)),
                ('farmer_question', models.TextField(help_text='Original farmer question')),
                ('ai_response', models.TextField(help_text='AI-generated response')),
                ('farmer_location', models.CharField(blank=True, max_length=100)),
                ('crop_context', models.CharField(blank=True, max_length=100)),
                ('season_context', models.CharField(blank=True, max_length=50)),
                ('openai_model_used', models.CharField(default='gpt-3.5-turbo', max_length=50)),
                ('tokens_used', models.IntegerField(default=0)),
                ('processing_time_ms', models.IntegerField(default=0)),
                ('confidence_score', models.FloatField(blank=True, null=True)),
                ('farmer_satisfied', models.BooleanField(blank=True, null=True)),
                ('farmer_rating', models.IntegerField(blank=True, help_text='1-5 rating', null=True)),
                ('follow_up_needed', models.BooleanField(default=False)),
                ('escalated_to_human', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_conversations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'AI Conversation',
                'verbose_name_plural': 'AI Conversations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIFeedback',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('feedback_type', models.CharField(choices=[('helpful', 'Very Helpful'), ('somewhat_helpful', 'Somewhat Helpful'), ('not_helpful', 'Not Helpful'), ('incorrect', 'Incorrect Information'), ('incomplete', 'Incomplete Response')], max_length=20)),
                ('rating', models.IntegerField(help_text='1-5 star rating')),
                ('comments', models.TextField(blank=True)),
                ('accuracy_rating', models.IntegerField(help_text='1-5 rating for accuracy')),
                ('relevance_rating', models.IntegerField(help_text='1-5 rating for relevance')),
                ('clarity_rating', models.IntegerField(help_text='1-5 rating for clarity')),
                ('actionability_rating', models.IntegerField(help_text='1-5 rating for actionable advice')),
                ('human_review_requested', models.BooleanField(default=False)),
                ('follow_up_needed', models.BooleanField(default=False)),
                ('escalation_required', models.BooleanField(default=False)),
                ('farmer_implemented_advice', models.BooleanField(blank=True, null=True)),
                ('implementation_results', models.TextField(blank=True)),
                ('would_recommend', models.BooleanField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('conversation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='ai.aiconversation')),
            ],
            options={
                'verbose_name': 'AI Feedback',
                'verbose_name_plural': 'AI Feedback',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIUsageAnalytics',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('daily_queries', models.IntegerField(default=0)),
                ('total_tokens_used', models.IntegerField(default=0)),
                ('cost_usd', models.DecimalField(decimal_places=4, default=0, max_digits=8)),
                ('crop_advisory_queries', models.IntegerField(default=0)),
                ('disease_detection_queries', models.IntegerField(default=0)),
                ('market_intelligence_queries', models.IntegerField(default=0)),
                ('general_queries', models.IntegerField(default=0)),
                ('average_response_time_ms', models.FloatField(default=0.0)),
                ('satisfaction_score', models.FloatField(default=0.0, help_text='Average user satisfaction (1-5)')),
                ('accuracy_score', models.FloatField(default=0.0, help_text='Accuracy of AI responses (0-100)')),
                ('peak_usage_hours', models.JSONField(default=list, help_text='Hours of peak usage')),
                ('preferred_languages', models.JSONField(default=dict, help_text='Language preferences')),
                ('common_topics', models.JSONField(default=dict, help_text='Most common query topics')),
                ('date', models.DateField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_usage', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'AI Usage Analytics',
                'verbose_name_plural': 'AI Usage Analytics',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='CropAdvisory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('farmer_location', models.CharField(max_length=100)),
                ('region', models.CharField(max_length=50)),
                ('soil_type', models.CharField(blank=True, max_length=100)),
                ('farm_size_acres', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('budget_ghs', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('experience_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('experienced', 'Experienced'), ('expert', 'Expert')], default='intermediate', max_length=20)),
                ('target_season', models.CharField(choices=[('major_rainy', 'Major Rainy Season (April-July)'), ('minor_rainy', 'Minor Rainy Season (September-November)'), ('dry_season', 'Dry Season (December-March)'), ('harmattan', 'Harmattan Period (December-February)')], max_length=20)),
                ('planting_month', models.CharField(blank=True, max_length=20)),
                ('recommended_crops', models.JSONField(default=list, help_text='List of recommended crops with details')),
                ('expected_yields', models.JSONField(default=dict, help_text='Expected yields for each crop')),
                ('investment_requirements', models.JSONField(default=dict, help_text='Investment needed per crop')),
                ('market_projections', models.JSONField(default=dict, help_text='Price and demand projections')),
                ('risk_assessment', models.JSONField(default=dict, help_text='Risk factors and mitigation')),
                ('planting_schedule', models.JSONField(default=dict, help_text='Month-by-month planting schedule')),
                ('resource_requirements', models.JSONField(default=dict, help_text='Seeds, fertilizer, labor requirements')),
                ('confidence_level', models.FloatField(default=0.0, help_text='AI confidence in recommendations (0-100)')),
                ('data_sources_used', models.JSONField(default=list, help_text='Data sources used for recommendations')),
                ('farmer_implemented', models.BooleanField(blank=True, null=True)),
                ('implementation_feedback', models.TextField(blank=True)),
                ('actual_results', models.JSONField(blank=True, default=dict, help_text='Actual yields and outcomes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='crop_advisories', to='ai.aiconversation')),
            ],
            options={
                'verbose_name': 'Crop Advisory',
                'verbose_name_plural': 'Crop Advisories',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DiseaseDetection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('crop_type', models.CharField(choices=[('maize', 'Maize/Corn'), ('rice', 'Rice'), ('tomato', 'Tomato'), ('cassava', 'Cassava'), ('cocoa', 'Cocoa'), ('plantain', 'Plantain'), ('yam', 'Yam'), ('beans', 'Beans'), ('pepper', 'Pepper'), ('onion', 'Onion'), ('other', 'Other')], max_length=30)),
                ('plant_age', models.CharField(blank=True, max_length=50)),
                ('growth_stage', models.CharField(blank=True, max_length=50)),
                ('farmer_description', models.TextField(help_text="Farmer's description of symptoms")),
                ('symptoms_observed', models.JSONField(default=list, help_text='List of observed symptoms')),
                ('affected_plant_parts', models.JSONField(default=list, help_text='Parts of plant affected')),
                ('weather_conditions', models.CharField(blank=True, max_length=100)),
                ('humidity_level', models.CharField(blank=True, max_length=50)),
                ('temperature_range', models.CharField(blank=True, max_length=50)),
                ('recent_treatments', models.TextField(blank=True)),
                ('identified_diseases', models.JSONField(default=list, help_text='Potential diseases identified')),
                ('primary_diagnosis', models.CharField(blank=True, max_length=100)),
                ('confidence_percentage', models.FloatField(default=0.0)),
                ('severity_level', models.CharField(blank=True, choices=[('mild', 'Mild'), ('moderate', 'Moderate'), ('severe', 'Severe'), ('critical', 'Critical')], max_length=20)),
                ('immediate_actions', models.JSONField(default=list, help_text='Immediate treatment steps')),
                ('treatment_plan', models.JSONField(default=dict, help_text='Detailed treatment plan')),
                ('preventive_measures', models.JSONField(default=list, help_text='Prevention strategies')),
                ('cost_estimate_ghs', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('treatment_effectiveness', models.CharField(blank=True, choices=[('very_effective', 'Very Effective'), ('effective', 'Effective'), ('partially_effective', 'Partially Effective'), ('not_effective', 'Not Effective')], max_length=20)),
                ('farmer_feedback', models.TextField(blank=True)),
                ('image_analyzed', models.BooleanField(default=False)),
                ('image_analysis_results', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='disease_detections', to='ai.aiconversation')),
            ],
            options={
                'verbose_name': 'Disease Detection',
                'verbose_name_plural': 'Disease Detections',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MarketIntelligence',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('crop_name', models.CharField(max_length=100)),
                ('target_region', models.CharField(choices=[('greater_accra', 'Greater Accra'), ('ashanti', 'Ashanti Region'), ('northern', 'Northern Region'), ('western', 'Western Region'), ('eastern', 'Eastern Region'), ('central', 'Central Region'), ('volta', 'Volta Region'), ('upper_east', 'Upper East'), ('upper_west', 'Upper West'), ('brong_ahafo', 'Brong Ahafo')], max_length=30)),
                ('prediction_timeframe', models.CharField(choices=[('1_month', '1 Month'), ('3_months', '3 Months'), ('6_months', '6 Months'), ('1_year', '1 Year')], max_length=20)),
                ('quantity_interested', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('current_price_ghs', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('current_demand_level', models.CharField(blank=True, choices=[('very_low', 'Very Low'), ('low', 'Low'), ('moderate', 'Moderate'), ('high', 'High'), ('very_high', 'Very High')], max_length=20)),
                ('predicted_price_range', models.JSONField(default=dict, help_text='Min/max price predictions')),
                ('demand_forecast', models.JSONField(default=dict, help_text='Demand predictions by month')),
                ('market_trends', models.JSONField(default=list, help_text='Identified market trends')),
                ('price_drivers', models.JSONField(default=list, help_text='Factors affecting price')),
                ('optimal_selling_period', models.JSONField(default=dict, help_text='Best months to sell')),
                ('market_entry_strategy', models.TextField(blank=True)),
                ('risk_factors', models.JSONField(default=list, help_text='Market risks to consider')),
                ('seasonal_factors', models.JSONField(default=dict, help_text='Seasonal influences')),
                ('export_opportunities', models.JSONField(default=dict, help_text='Export market potential')),
                ('prediction_accuracy', models.FloatField(blank=True, help_text='Actual vs predicted accuracy', null=True)),
                ('actual_price_achieved', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='market_intelligence', to='ai.aiconversation')),
            ],
            options={
                'verbose_name': 'Market Intelligence',
                'verbose_name_plural': 'Market Intelligence',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='aiconversation',
            index=models.Index(fields=['user', 'conversation_type'], name='ai_aiconver_user_id_1f7ebd_idx'),
        ),
        migrations.AddIndex(
            model_name='aiconversation',
            index=models.Index(fields=['language', 'created_at'], name='ai_aiconver_languag_31c73a_idx'),
        ),
        migrations.AddIndex(
            model_name='aiconversation',
            index=models.Index(fields=['farmer_satisfied'], name='ai_aiconver_farmer__c2c441_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='aiusageanalytics',
            unique_together={('user', 'date')},
        ),
    ]
