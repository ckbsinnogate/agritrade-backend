# Generated by Django 5.1.6 on 2025-07-04 23:11

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='LoyaltyProgram',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('program_type', models.CharField(choices=[('points', 'Points Based'), ('tier', 'Tier Based'), ('cashback', 'Cashback'), ('discount', 'Discount')], max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('rules', models.JSONField(default=dict, help_text='Program rules and earning criteria')),
                ('rewards', models.JSONField(default=dict, help_text='Available rewards and redemption options')),
                ('target_user_types', models.JSONField(default=list, help_text='User types eligible for this program')),
                ('minimum_transactions', models.IntegerField(default=0)),
                ('minimum_spend', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'loyalty_programs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('plan_type', models.CharField(choices=[('farmer', 'Farmer'), ('consumer', 'Consumer'), ('institution', 'Institution'), ('processor', 'Processor'), ('logistics', 'Logistics')], max_length=20)),
                ('tier', models.CharField(choices=[('basic', 'Basic'), ('professional', 'Professional'), ('enterprise', 'Enterprise'), ('premium', 'Premium')], max_length=20)),
                ('description', models.TextField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(choices=[('GHS', 'Ghana Cedi'), ('NGN', 'Nigerian Naira'), ('KES', 'Kenyan Shilling'), ('USD', 'US Dollar')], default='GHS', max_length=3)),
                ('billing_cycle', models.CharField(choices=[('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly')], max_length=20)),
                ('trial_days', models.IntegerField(default=0)),
                ('features', models.JSONField(default=dict)),
                ('product_listing_limit', models.IntegerField(blank=True, null=True)),
                ('warehouse_access', models.IntegerField(blank=True, null=True)),
                ('transaction_fee_percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('monthly_transactions', models.IntegerField(blank=True, null=True)),
                ('storage_limit_gb', models.IntegerField(blank=True, null=True)),
                ('sms_credits', models.IntegerField(blank=True, null=True)),
                ('priority_support', models.BooleanField(default=False)),
                ('analytics_access', models.BooleanField(default=False)),
                ('api_access', models.BooleanField(default=False)),
                ('blockchain_features', models.BooleanField(default=False)),
                ('marketing_tools', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('sort_order', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'subscription_plans',
                'ordering': ['plan_type', 'sort_order', 'price'],
                'indexes': [models.Index(fields=['plan_type', 'tier'], name='subscriptio_plan_ty_e50b45_idx'), models.Index(fields=['is_active'], name='subscriptio_is_acti_4d4352_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserLoyalty',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('bronze', 'Bronze'), ('silver', 'Silver'), ('gold', 'Gold'), ('platinum', 'Platinum'), ('diamond', 'Diamond')], default='bronze', max_length=20)),
                ('points_balance', models.IntegerField(default=0)),
                ('points_earned_total', models.IntegerField(default=0)),
                ('points_redeemed_total', models.IntegerField(default=0)),
                ('tier_level', models.IntegerField(default=1)),
                ('tier_progress', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('total_transactions', models.IntegerField(default=0)),
                ('total_spent', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='subscriptions.loyaltyprogram')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loyalty_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_loyalty',
                'ordering': ['-points_balance'],
            },
        ),
        migrations.CreateModel(
            name='LoyaltyTransaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('transaction_type', models.CharField(choices=[('earned', 'Points Earned'), ('redeemed', 'Points Redeemed'), ('expired', 'Points Expired'), ('bonus', 'Bonus Points'), ('adjustment', 'Manual Adjustment')], max_length=20)),
                ('points', models.IntegerField()),
                ('description', models.TextField(blank=True)),
                ('order_id', models.UUIDField(blank=True, help_text='Related order if applicable', null=True)),
                ('reference_id', models.CharField(blank=True, help_text='External reference ID', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('loyalty_membership', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='subscriptions.userloyalty')),
            ],
            options={
                'db_table': 'loyalty_transactions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserSubscription',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('active', 'Active'), ('cancelled', 'Cancelled'), ('expired', 'Expired'), ('suspended', 'Suspended'), ('trial', 'Trial')], default='active', max_length=20)),
                ('started_at', models.DateTimeField()),
                ('expires_at', models.DateTimeField()),
                ('auto_renew', models.BooleanField(default=True)),
                ('trial_ends_at', models.DateTimeField(blank=True, null=True)),
                ('amount_paid', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(default='GHS', max_length=3)),
                ('payment_method', models.CharField(blank=True, max_length=50)),
                ('last_payment_date', models.DateTimeField(blank=True, null=True)),
                ('next_payment_date', models.DateTimeField(blank=True, null=True)),
                ('current_period_transactions', models.IntegerField(default=0)),
                ('current_period_storage_gb', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('current_period_sms_sent', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='subscriptions.subscriptionplan')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_subscriptions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SubscriptionUsageLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('usage_type', models.CharField(choices=[('transaction', 'Transaction'), ('storage', 'Storage'), ('sms', 'SMS'), ('api_call', 'API Call'), ('listing', 'Product Listing')], max_length=30)),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField(blank=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('subscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_logs', to='subscriptions.usersubscription')),
            ],
            options={
                'db_table': 'subscription_usage_logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SubscriptionInvoice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('invoice_number', models.CharField(max_length=50, unique=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('sent', 'Sent'), ('paid', 'Paid'), ('overdue', 'Overdue'), ('cancelled', 'Cancelled')], default='draft', max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(default='GHS', max_length=3)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('issue_date', models.DateTimeField(auto_now_add=True)),
                ('due_date', models.DateTimeField()),
                ('paid_date', models.DateTimeField(blank=True, null=True)),
                ('payment_method', models.CharField(blank=True, max_length=50)),
                ('transaction_id', models.CharField(blank=True, max_length=100)),
                ('payment_gateway', models.CharField(blank=True, max_length=50)),
                ('period_start', models.DateTimeField()),
                ('period_end', models.DateTimeField()),
                ('notes', models.TextField(blank=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('subscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to='subscriptions.usersubscription')),
            ],
            options={
                'db_table': 'subscription_invoices',
                'ordering': ['-issue_date'],
            },
        ),
        migrations.AddIndex(
            model_name='userloyalty',
            index=models.Index(fields=['user', 'status'], name='user_loyalt_user_id_4f4631_idx'),
        ),
        migrations.AddIndex(
            model_name='userloyalty',
            index=models.Index(fields=['program', 'tier_level'], name='user_loyalt_program_1442c3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userloyalty',
            unique_together={('user', 'program')},
        ),
        migrations.AddIndex(
            model_name='loyaltytransaction',
            index=models.Index(fields=['loyalty_membership', 'transaction_type'], name='loyalty_tra_loyalty_69ae2a_idx'),
        ),
        migrations.AddIndex(
            model_name='loyaltytransaction',
            index=models.Index(fields=['created_at'], name='loyalty_tra_created_6e8e0e_idx'),
        ),
        migrations.AddIndex(
            model_name='usersubscription',
            index=models.Index(fields=['user', 'status'], name='user_subscr_user_id_c57286_idx'),
        ),
        migrations.AddIndex(
            model_name='usersubscription',
            index=models.Index(fields=['expires_at'], name='user_subscr_expires_e42bda_idx'),
        ),
        migrations.AddIndex(
            model_name='usersubscription',
            index=models.Index(fields=['status'], name='user_subscr_status_deb44c_idx'),
        ),
        migrations.AddIndex(
            model_name='subscriptionusagelog',
            index=models.Index(fields=['subscription', 'usage_type'], name='subscriptio_subscri_43e6db_idx'),
        ),
        migrations.AddIndex(
            model_name='subscriptionusagelog',
            index=models.Index(fields=['created_at'], name='subscriptio_created_e29a6a_idx'),
        ),
        migrations.AddIndex(
            model_name='subscriptioninvoice',
            index=models.Index(fields=['subscription', 'status'], name='subscriptio_subscri_329d7e_idx'),
        ),
        migrations.AddIndex(
            model_name='subscriptioninvoice',
            index=models.Index(fields=['due_date'], name='subscriptio_due_dat_6ab4a4_idx'),
        ),
        migrations.AddIndex(
            model_name='subscriptioninvoice',
            index=models.Index(fields=['status'], name='subscriptio_status_eea1bb_idx'),
        ),
    ]
