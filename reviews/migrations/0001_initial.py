# Generated by Django 5.1.6 on 2025-07-04 22:49

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('orders', '0001_initial'),
        ('products', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('overall_rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('quality_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('freshness_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('packaging_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('value_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('delivery_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('farmer_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('title', models.CharField(blank=True, max_length=200)),
                ('content', models.TextField()),
                ('pros', models.TextField(blank=True)),
                ('cons', models.TextField(blank=True)),
                ('verified_purchase', models.BooleanField(default=False)),
                ('blockchain_verified', models.BooleanField(default=False)),
                ('images', models.JSONField(blank=True, default=list)),
                ('videos', models.JSONField(blank=True, default=list)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('hidden', 'Hidden'), ('flagged', 'Flagged')], default='published', max_length=20)),
                ('flagged_reason', models.TextField(blank=True)),
                ('moderated_at', models.DateTimeField(blank=True, null=True)),
                ('helpful_votes', models.IntegerField(default=0)),
                ('total_votes', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('moderated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderated_reviews', to=settings.AUTH_USER_MODEL)),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='orders.order')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='products.product')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews_given', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewFlag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reason', models.CharField(choices=[('spam', 'Spam'), ('inappropriate', 'Inappropriate Content'), ('fake', 'Fake Review'), ('offensive', 'Offensive Language'), ('irrelevant', 'Irrelevant to Product'), ('other', 'Other')], max_length=50)),
                ('description', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('reviewed', 'Reviewed'), ('resolved', 'Resolved'), ('dismissed', 'Dismissed')], default='pending', max_length=20)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('flagger', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flags_submitted', to=settings.AUTH_USER_MODEL)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flags', to='reviews.review')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='flags_reviewed', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ReviewHelpfulVote',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_helpful', models.BooleanField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='helpful_votes_detail', to='reviews.review')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_votes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ReviewRecipe',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('ingredients', models.JSONField(default=list)),
                ('instructions', models.TextField()),
                ('prep_time', models.IntegerField(help_text='Preparation time in minutes')),
                ('cook_time', models.IntegerField(help_text='Cooking time in minutes')),
                ('servings', models.IntegerField()),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], max_length=20)),
                ('calories_per_serving', models.IntegerField(blank=True, null=True)),
                ('nutrition_notes', models.TextField(blank=True)),
                ('images', models.JSONField(blank=True, default=list)),
                ('likes_count', models.IntegerField(default=0)),
                ('shares_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipes_shared', to=settings.AUTH_USER_MODEL)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipes', to='reviews.review')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewResponse',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField()),
                ('is_public', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('responder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_responses', to=settings.AUTH_USER_MODEL)),
                ('review', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='response', to='reviews.review')),
            ],
        ),
        migrations.CreateModel(
            name='SeasonalInsight',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('season', models.CharField(choices=[('spring', 'Spring'), ('summer', 'Summer'), ('autumn', 'Autumn'), ('winter', 'Winter'), ('dry_season', 'Dry Season'), ('rainy_season', 'Rainy Season')], max_length=20)),
                ('average_rating', models.DecimalField(decimal_places=2, max_digits=3)),
                ('review_count', models.IntegerField()),
                ('quality_score', models.DecimalField(decimal_places=2, max_digits=3)),
                ('availability_score', models.DecimalField(decimal_places=2, max_digits=3)),
                ('price_trend', models.CharField(choices=[('low', 'Low Prices'), ('moderate', 'Moderate Prices'), ('high', 'High Prices')], max_length=20)),
                ('insights', models.TextField()),
                ('recommendations', models.TextField()),
                ('best_varieties', models.JSONField(blank=True, default=list)),
                ('region', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seasonal_insights', to='products.product')),
            ],
        ),
        migrations.CreateModel(
            name='ExpertReview',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('expert_type', models.CharField(choices=[('agricultural_officer', 'Agricultural Extension Officer'), ('nutritionist', 'Nutritionist'), ('food_scientist', 'Food Scientist'), ('sustainability_expert', 'Sustainability Expert'), ('supply_chain_expert', 'Supply Chain Expert'), ('quality_inspector', 'Quality Inspector')], max_length=50)),
                ('overall_rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('quality_assessment', models.TextField()),
                ('nutritional_value', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('sustainability_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('recommendations', models.TextField(blank=True)),
                ('certifications', models.JSONField(blank=True, default=list)),
                ('verified_expert', models.BooleanField(default=False)),
                ('expert_credentials', models.TextField(blank=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_published', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('expert', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expert_reviews_given', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expert_reviews', to='products.product')),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['product', '-created_at'], name='reviews_exp_product_845b60_idx'), models.Index(fields=['expert', '-created_at'], name='reviews_exp_expert__d6b2e3_idx'), models.Index(fields=['expert_type'], name='reviews_exp_expert__d776f6_idx'), models.Index(fields=['verified_expert'], name='reviews_exp_verifie_63f961_idx'), models.Index(fields=['is_featured'], name='reviews_exp_is_feat_05bf01_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['product', '-created_at'], name='reviews_rev_product_d800fc_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['reviewer', '-created_at'], name='reviews_rev_reviewe_5e332e_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['overall_rating'], name='reviews_rev_overall_96630a_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['verified_purchase'], name='reviews_rev_verifie_61cd13_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['status'], name='reviews_rev_status_5966f7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('product', 'reviewer', 'order')},
        ),
        migrations.AddIndex(
            model_name='reviewflag',
            index=models.Index(fields=['review', 'status'], name='reviews_rev_review__0461da_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewflag',
            index=models.Index(fields=['flagger', '-created_at'], name='reviews_rev_flagger_b27df5_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewflag',
            index=models.Index(fields=['status', '-created_at'], name='reviews_rev_status_a22b84_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewhelpfulvote',
            index=models.Index(fields=['review', 'is_helpful'], name='reviews_rev_review__39bff2_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewhelpfulvote',
            index=models.Index(fields=['user', '-created_at'], name='reviews_rev_user_id_afffb4_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='reviewhelpfulvote',
            unique_together={('review', 'user')},
        ),
        migrations.AddIndex(
            model_name='reviewrecipe',
            index=models.Index(fields=['review', '-created_at'], name='reviews_rev_review__647076_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewrecipe',
            index=models.Index(fields=['author', '-created_at'], name='reviews_rev_author__aa6e26_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewrecipe',
            index=models.Index(fields=['difficulty'], name='reviews_rev_difficu_806b5c_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewresponse',
            index=models.Index(fields=['review'], name='reviews_rev_review__989a48_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewresponse',
            index=models.Index(fields=['responder', '-created_at'], name='reviews_rev_respond_55848e_idx'),
        ),
        migrations.AddIndex(
            model_name='seasonalinsight',
            index=models.Index(fields=['product', 'season'], name='reviews_sea_product_b4a36d_idx'),
        ),
        migrations.AddIndex(
            model_name='seasonalinsight',
            index=models.Index(fields=['season', 'region'], name='reviews_sea_season_ee7caa_idx'),
        ),
        migrations.AddIndex(
            model_name='seasonalinsight',
            index=models.Index(fields=['average_rating'], name='reviews_sea_average_072acc_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='seasonalinsight',
            unique_together={('product', 'season', 'region')},
        ),
    ]
