# Generated by Django 5.1.6 on 2025-07-06 21:36

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0001_initial'),
        ('reviews', '0002_add_multi_dimensional_rating_fields'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PeerRecommendation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('recommendation_type', models.CharField(choices=[('product_endorsement', 'Product Endorsement'), ('farmer_endorsement', 'Farmer Endorsement'), ('practice_sharing', 'Best Practice Sharing'), ('equipment_review', 'Equipment Review'), ('supplier_recommendation', 'Supplier Recommendation')], default='product_endorsement', max_length=30)),
                ('recommendation_strength', models.CharField(choices=[('highly_recommend', 'Highly Recommend'), ('recommend', 'Recommend'), ('recommend_with_conditions', 'Recommend with Conditions'), ('neutral', 'Neutral'), ('not_recommend', 'Do Not Recommend')], default='recommend', max_length=25)),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('experience_duration', models.CharField(blank=True, help_text="How long you've used this product/farmer", max_length=50)),
                ('farm_context', models.TextField(blank=True, help_text='Your farm size, location, and growing conditions')),
                ('results_achieved', models.TextField(blank=True, help_text='Results you achieved using this product/farmer')),
                ('conditions_for_success', models.TextField(blank=True, help_text='Conditions needed for similar success')),
                ('value_for_farmers', models.IntegerField(help_text='Value rating specifically for farmers', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('ease_of_use', models.IntegerField(help_text='How easy it is to use/work with', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('yield_impact', models.IntegerField(blank=True, help_text='Impact on crop yield (if applicable)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('cost_effectiveness', models.IntegerField(help_text='Cost-effectiveness for farming operations', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('peer_helpful_votes', models.IntegerField(default=0)),
                ('peer_total_votes', models.IntegerField(default=0)),
                ('verified_peer', models.BooleanField(default=False, help_text='Verified as experienced farmer')),
                ('relevant_regions', models.JSONField(blank=True, default=list, help_text='Regions where this recommendation applies')),
                ('seasonal_relevance', models.JSONField(blank=True, default=list, help_text='Seasons when this recommendation is most relevant')),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('farmer_recommended', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='farmer_endorsements', to=settings.AUTH_USER_MODEL)),
                ('moderated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderated_peer_recommendations', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='peer_recommendations', to='products.product')),
                ('recommended_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='peer_recommendations_received', to=settings.AUTH_USER_MODEL)),
                ('recommender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='peer_recommendations_given', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PeerRecommendationInteraction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('interaction_type', models.CharField(choices=[('save', 'Saved for Later'), ('share', 'Shared with Others'), ('implement', 'Implemented Recommendation'), ('request_info', 'Requested More Information'), ('connect', 'Connected with Recommender')], max_length=20)),
                ('notes', models.TextField(blank=True, help_text="User's notes about the interaction")),
                ('implementation_success', models.BooleanField(blank=True, null=True)),
                ('implementation_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('recommendation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to='reviews.peerrecommendation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='peer_recommendation_interactions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PeerRecommendationVote',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_helpful', models.BooleanField()),
                ('comment', models.TextField(blank=True, help_text='Optional comment about the recommendation')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('recommendation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='reviews.peerrecommendation')),
                ('voter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='peer_recommendation_votes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FarmerNetwork',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('trust_level', models.CharField(choices=[('low', 'Low Trust'), ('medium', 'Medium Trust'), ('high', 'High Trust'), ('verified', 'Verified Partner')], default='medium', max_length=20)),
                ('recommendations_received', models.IntegerField(default=0)),
                ('successful_recommendations', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following_farmers', to=settings.AUTH_USER_MODEL)),
                ('following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='farmer_followers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['follower', 'trust_level'], name='reviews_far_followe_1a29f5_idx'), models.Index(fields=['following', 'trust_level'], name='reviews_far_followi_91eec3_idx')],
                'unique_together': {('follower', 'following')},
            },
        ),
        migrations.AddIndex(
            model_name='peerrecommendation',
            index=models.Index(fields=['product', '-created_at'], name='reviews_pee_product_b288f1_idx'),
        ),
        migrations.AddIndex(
            model_name='peerrecommendation',
            index=models.Index(fields=['recommender', '-created_at'], name='reviews_pee_recomme_aa8bd4_idx'),
        ),
        migrations.AddIndex(
            model_name='peerrecommendation',
            index=models.Index(fields=['recommendation_type'], name='reviews_pee_recomme_741136_idx'),
        ),
        migrations.AddIndex(
            model_name='peerrecommendation',
            index=models.Index(fields=['recommendation_strength'], name='reviews_pee_recomme_8b3e71_idx'),
        ),
        migrations.AddIndex(
            model_name='peerrecommendation',
            index=models.Index(fields=['verified_peer'], name='reviews_pee_verifie_b8f9ac_idx'),
        ),
        migrations.AddIndex(
            model_name='peerrecommendation',
            index=models.Index(fields=['is_featured'], name='reviews_pee_is_feat_ab5751_idx'),
        ),
        migrations.AddIndex(
            model_name='peerrecommendationinteraction',
            index=models.Index(fields=['recommendation', 'interaction_type'], name='reviews_pee_recomme_102fd5_idx'),
        ),
        migrations.AddIndex(
            model_name='peerrecommendationinteraction',
            index=models.Index(fields=['user', 'interaction_type'], name='reviews_pee_user_id_dd6a22_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='peerrecommendationinteraction',
            unique_together={('recommendation', 'user', 'interaction_type')},
        ),
        migrations.AddIndex(
            model_name='peerrecommendationvote',
            index=models.Index(fields=['recommendation', 'is_helpful'], name='reviews_pee_recomme_248ed4_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='peerrecommendationvote',
            unique_together={('recommendation', 'voter')},
        ),
    ]
