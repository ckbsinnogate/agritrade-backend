#!/usr/bin/env python
"""
üîç AI Assistant 404 Fix Validation Script
Verifies all fixes are properly implemented without requiring running server
"""

import os
import sys

def check_file_exists(filepath, description):
    """Check if a file exists and print status"""
    if os.path.exists(filepath):
        print(f"‚úÖ {description}: EXISTS")
        return True
    else:
        print(f"‚ùå {description}: MISSING")
        return False

def check_file_content(filepath, search_text, description):
    """Check if file contains specific content"""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
            if search_text in content:
                print(f"‚úÖ {description}: IMPLEMENTED")
                return True
            else:
                print(f"‚ùå {description}: NOT FOUND")
                return False
    except Exception as e:
        print(f"‚ùå {description}: ERROR - {str(e)}")
        return False

def main():
    """Validate all AI Assistant fixes"""
    print("ü§ñ AI ASSISTANT 404 FIX VALIDATION")
    print("=" * 50)
    
    base_path = "c:\\Users\\user\\Desktop\\mywebproject\\backup_v1\\myapiproject"
    
    # Check required files exist
    files_to_check = [
        (os.path.join(base_path, "ai", "urls.py"), "AI URLs file"),
        (os.path.join(base_path, "ai", "views.py"), "AI Views file"),
        (os.path.join(base_path, "FRONTEND_AI_INTEGRATION_GUIDE.md"), "Frontend integration guide"),
        (os.path.join(base_path, "test_ai_endpoints_final.py"), "Test suite"),
    ]
    
    print("\nüìÅ FILE EXISTENCE CHECK:")
    file_checks = []
    for filepath, description in files_to_check:
        file_checks.append(check_file_exists(filepath, description))
    
    # Check URL routing fix
    print("\nüîß URL ROUTING FIX CHECK:")
    url_checks = []
    ai_urls_path = os.path.join(base_path, "ai", "urls.py")
    url_checks.append(check_file_content(
        ai_urls_path, 
        "path('api/', include(api_urlpatterns))",
        "API prefix routing"
    ))
    url_checks.append(check_file_content(
        ai_urls_path,
        "path('disease-detection/', DiseaseDetectionView.as_view()",
        "Disease detection endpoint"
    ))
    
    # Check validation fix
    print("\n‚öñÔ∏è VALIDATION FIX CHECK:")
    views_path = os.path.join(base_path, "ai", "views.py")
    validation_checks = []
    validation_checks.append(check_file_content(
        views_path,
        "if not crop_type:",
        "Crop type validation"
    ))
    validation_checks.append(check_file_content(
        views_path,
        "if not symptoms and not image_url:",
        "Flexible symptoms/image validation"
    ))
    
    # Check frontend documentation
    print("\nüìñ DOCUMENTATION CHECK:")
    doc_checks = []
    frontend_guide_path = os.path.join(base_path, "FRONTEND_AI_INTEGRATION_GUIDE.md")
    doc_checks.append(check_file_content(
        frontend_guide_path,
        "http://127.0.0.1:8000/api/v1/ai/api",
        "Correct base URL (port 8000)"
    ))
    doc_checks.append(check_file_content(
        frontend_guide_path,
        "detectDiseaseBySymptoms",
        "Disease detection examples"
    ))
    
    # Summary
    print("\nüìä VALIDATION SUMMARY:")
    total_checks = len(file_checks) + len(url_checks) + len(validation_checks) + len(doc_checks)
    passed_checks = sum(file_checks) + sum(url_checks) + sum(validation_checks) + sum(doc_checks)
    
    print(f"Total Checks: {total_checks}")
    print(f"Passed: {passed_checks}")
    print(f"Failed: {total_checks - passed_checks}")
    
    if passed_checks == total_checks:
        print("\nüéâ ALL FIXES VALIDATED SUCCESSFULLY!")
        print("‚úÖ AI Assistant 404 errors are resolved")
        print("‚úÖ Disease detection validation is fixed")
        print("‚úÖ Frontend documentation is updated")
        print("‚úÖ Ready for port 8000 deployment")
        return True
    else:
        print(f"\n‚ö†Ô∏è {total_checks - passed_checks} validation(s) failed")
        print("Check the output above for details")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
