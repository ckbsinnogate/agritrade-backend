# Generated by Django 5.1.6 on 2025-07-04 20:26

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('orders', '0001_initial'),
        ('products', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='WarehouseType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('warehouse_type', models.CharField(choices=[('cold_storage', 'Cold Storage'), ('dry_storage', 'Dry Storage'), ('processing', 'Processing Facility'), ('multi_purpose', 'Multi-Purpose'), ('organic_only', 'Organic Only'), ('conventional', 'Conventional')], max_length=20)),
                ('temperature_range_min', models.DecimalField(blank=True, decimal_places=2, help_text='Minimum temperature in Celsius', max_digits=5, null=True)),
                ('temperature_range_max', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum temperature in Celsius', max_digits=5, null=True)),
                ('humidity_range_min', models.DecimalField(blank=True, decimal_places=2, help_text='Minimum humidity percentage', max_digits=5, null=True)),
                ('humidity_range_max', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum humidity percentage', max_digits=5, null=True)),
                ('special_requirements', models.JSONField(blank=True, default=dict, help_text='Additional requirements (organic certification, etc.)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'warehouse_types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Warehouse',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('code', models.CharField(help_text='Warehouse identification code', max_length=20, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('country', models.CharField(default='Ghana', max_length=100)),
                ('region', models.CharField(max_length=100)),
                ('city', models.CharField(max_length=100)),
                ('address', models.JSONField(help_text='Complete address information')),
                ('gps_coordinates', models.CharField(blank=True, help_text='GPS coordinates (lat,lng)', max_length=50)),
                ('capacity_cubic_meters', models.DecimalField(decimal_places=2, help_text='Total storage capacity', max_digits=10)),
                ('current_utilization_percent', models.DecimalField(decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('temperature_controlled', models.BooleanField(default=False)),
                ('humidity_controlled', models.BooleanField(default=False)),
                ('organic_certified', models.BooleanField(default=False)),
                ('has_loading_dock', models.BooleanField(default=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('maintenance', 'Under Maintenance'), ('construction', 'Under Construction')], default='active', max_length=20)),
                ('contact_info', models.JSONField(blank=True, default=dict)),
                ('operating_hours', models.JSONField(blank=True, default=dict, help_text='Weekly operating schedule')),
                ('security_features', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manager', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_warehouses', to=settings.AUTH_USER_MODEL)),
                ('warehouse_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='warehouses', to='warehouses.warehousetype')),
            ],
            options={
                'db_table': 'warehouses',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='WarehouseInventory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity', models.DecimalField(decimal_places=3, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('reserved_quantity', models.DecimalField(decimal_places=3, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('available_quantity', models.DecimalField(decimal_places=3, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('batch_number', models.CharField(blank=True, max_length=100)),
                ('lot_number', models.CharField(blank=True, max_length=100)),
                ('manufacturing_date', models.DateField(blank=True, null=True)),
                ('harvest_date', models.DateField(blank=True, null=True)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('received_date', models.DateField(auto_now_add=True)),
                ('quality_status', models.CharField(choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('expired', 'Expired'), ('quarantine', 'Under Quarantine')], default='good', max_length=20)),
                ('storage_conditions', models.JSONField(blank=True, default=dict)),
                ('last_inspection_date', models.DateField(blank=True, null=True)),
                ('next_inspection_date', models.DateField(blank=True, null=True)),
                ('inspection_notes', models.TextField(blank=True)),
                ('location_details', models.JSONField(blank=True, default=dict, help_text='Specific location within zone (aisle, shelf, etc.)')),
                ('qr_code', models.CharField(blank=True, max_length=100, unique=True)),
                ('rfid_tag', models.CharField(blank=True, max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('inspector', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inspected_inventory', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='warehouse_inventory', to='products.product')),
                ('warehouse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='warehouses.warehouse')),
            ],
            options={
                'db_table': 'warehouse_inventory',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WarehouseZone',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('zone_code', models.CharField(help_text='Zone identifier within warehouse', max_length=10)),
                ('name', models.CharField(max_length=100)),
                ('zone_type', models.CharField(choices=[('cold_storage', 'Cold Storage'), ('dry_storage', 'Dry Storage'), ('organic', 'Organic Only'), ('processing', 'Processing Area'), ('loading', 'Loading/Unloading'), ('quality_control', 'Quality Control'), ('quarantine', 'Quarantine'), ('packaging', 'Packaging')], max_length=20)),
                ('capacity_cubic_meters', models.DecimalField(decimal_places=2, max_digits=8)),
                ('current_stock_level', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('temperature_range', models.JSONField(blank=True, default=dict, help_text='Min/max temperature settings')),
                ('humidity_range', models.JSONField(blank=True, default=dict, help_text='Min/max humidity settings')),
                ('special_conditions', models.JSONField(blank=True, default=dict, help_text='Special storage conditions')),
                ('is_active', models.BooleanField(default=True)),
                ('requires_certification', models.BooleanField(default=False, help_text='Zone requires special certifications')),
                ('access_restrictions', models.JSONField(blank=True, default=list, help_text='Access control requirements')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('warehouse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='zones', to='warehouses.warehouse')),
            ],
            options={
                'db_table': 'warehouse_zones',
                'ordering': ['warehouse', 'zone_code'],
            },
        ),
        migrations.CreateModel(
            name='WarehouseMovement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('movement_type', models.CharField(choices=[('inbound', 'Inbound Receipt'), ('outbound', 'Outbound Shipment'), ('transfer', 'Internal Transfer'), ('adjustment', 'Inventory Adjustment'), ('loss', 'Inventory Loss'), ('return', 'Product Return'), ('quarantine', 'Move to Quarantine'), ('release', 'Release from Quarantine')], max_length=20)),
                ('reference_number', models.CharField(max_length=100, unique=True)),
                ('quantity', models.DecimalField(decimal_places=3, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('unit', models.CharField(max_length=20)),
                ('reason', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('conditions_at_movement', models.JSONField(blank=True, default=dict, help_text='Temperature, humidity, etc. at time of movement')),
                ('is_completed', models.BooleanField(default=False)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('authorized_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authorized_movements', to=settings.AUTH_USER_MODEL)),
                ('inventory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='movements', to='warehouses.warehouseinventory')),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='warehouse_movements', to='orders.order')),
                ('performed_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performed_movements', to=settings.AUTH_USER_MODEL)),
                ('from_zone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='outbound_movements', to='warehouses.warehousezone')),
                ('to_zone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='inbound_movements', to='warehouses.warehousezone')),
            ],
            options={
                'db_table': 'warehouse_movements',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='warehouseinventory',
            name='zone',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='warehouses.warehousezone'),
        ),
        migrations.CreateModel(
            name='TemperatureLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temperature', models.DecimalField(decimal_places=2, help_text='Temperature in Celsius', max_digits=5)),
                ('humidity', models.DecimalField(blank=True, decimal_places=2, help_text='Humidity percentage', max_digits=5, null=True)),
                ('sensor_id', models.CharField(blank=True, max_length=100)),
                ('sensor_location', models.CharField(blank=True, max_length=200)),
                ('is_within_range', models.BooleanField(default=True)),
                ('alert_triggered', models.BooleanField(default=False)),
                ('alert_acknowledged', models.BooleanField(default=False)),
                ('additional_data', models.JSONField(blank=True, default=dict, help_text='Additional sensor data')),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='acknowledged_alerts', to=settings.AUTH_USER_MODEL)),
                ('warehouse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='temperature_logs', to='warehouses.warehouse')),
                ('zone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='temperature_logs', to='warehouses.warehousezone')),
            ],
            options={
                'db_table': 'temperature_logs',
                'ordering': ['-recorded_at'],
            },
        ),
        migrations.CreateModel(
            name='QualityInspection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('inspection_number', models.CharField(max_length=100, unique=True)),
                ('inspection_type', models.CharField(choices=[('routine', 'Routine Inspection'), ('incoming', 'Incoming Goods Inspection'), ('complaint', 'Complaint Investigation'), ('pre_shipment', 'Pre-Shipment Inspection'), ('compliance', 'Compliance Audit'), ('damage', 'Damage Assessment')], max_length=20)),
                ('inspection_date', models.DateTimeField()),
                ('visual_inspection', models.JSONField(blank=True, default=dict, help_text='Visual inspection results')),
                ('physical_tests', models.JSONField(blank=True, default=dict, help_text='Physical test results')),
                ('chemical_tests', models.JSONField(blank=True, default=dict, help_text='Chemical test results')),
                ('microbiological_tests', models.JSONField(blank=True, default=dict, help_text='Microbiological test results')),
                ('overall_result', models.CharField(choices=[('pass', 'Pass'), ('pass_conditional', 'Pass with Conditions'), ('fail', 'Fail'), ('quarantine', 'Quarantine Required'), ('retest', 'Retest Required')], max_length=20)),
                ('quality_score', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('findings', models.TextField()),
                ('recommendations', models.TextField(blank=True)),
                ('corrective_actions', models.TextField(blank=True)),
                ('requires_follow_up', models.BooleanField(default=False)),
                ('follow_up_date', models.DateField(blank=True, null=True)),
                ('follow_up_completed', models.BooleanField(default=False)),
                ('photos', models.JSONField(blank=True, default=list, help_text='Photo URLs')),
                ('documents', models.JSONField(blank=True, default=list, help_text='Document URLs')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('inspector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conducted_inspections', to=settings.AUTH_USER_MODEL)),
                ('inventory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quality_inspections', to='warehouses.warehouseinventory')),
            ],
            options={
                'db_table': 'quality_inspections',
                'ordering': ['-inspection_date'],
                'indexes': [models.Index(fields=['inspection_type', 'inspection_date'], name='quality_ins_inspect_07a5ba_idx'), models.Index(fields=['overall_result'], name='quality_ins_overall_775d53_idx')],
            },
        ),
        migrations.CreateModel(
            name='WarehouseStaff',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('manager', 'Warehouse Manager'), ('supervisor', 'Zone Supervisor'), ('worker', 'Warehouse Worker'), ('security', 'Security Personnel'), ('quality_inspector', 'Quality Inspector'), ('forklift_operator', 'Forklift Operator'), ('admin', 'Administrative Staff')], max_length=20)),
                ('access_zones', models.JSONField(blank=True, default=list, help_text='List of zone IDs this staff can access')),
                ('permissions', models.JSONField(blank=True, default=dict, help_text='Specific permissions within warehouse')),
                ('is_active', models.BooleanField(default=True)),
                ('hired_date', models.DateField()),
                ('performance_rating', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('certifications', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('supervisor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subordinates', to='warehouses.warehousestaff')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='warehouse_positions', to=settings.AUTH_USER_MODEL)),
                ('warehouse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='staff', to='warehouses.warehouse')),
            ],
            options={
                'db_table': 'warehouse_staff',
                'ordering': ['warehouse', 'role', 'hired_date'],
                'unique_together': {('warehouse', 'user')},
            },
        ),
        migrations.AddIndex(
            model_name='warehouse',
            index=models.Index(fields=['country', 'region'], name='warehouses_country_9c8825_idx'),
        ),
        migrations.AddIndex(
            model_name='warehouse',
            index=models.Index(fields=['status'], name='warehouses_status_181a1f_idx'),
        ),
        migrations.AddIndex(
            model_name='warehouse',
            index=models.Index(fields=['organic_certified'], name='warehouses_organic_228ab6_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='warehousezone',
            unique_together={('warehouse', 'zone_code')},
        ),
        migrations.AddIndex(
            model_name='warehousemovement',
            index=models.Index(fields=['movement_type', 'created_at'], name='warehouse_m_movemen_890299_idx'),
        ),
        migrations.AddIndex(
            model_name='warehousemovement',
            index=models.Index(fields=['reference_number'], name='warehouse_m_referen_9b61be_idx'),
        ),
        migrations.AddIndex(
            model_name='warehouseinventory',
            index=models.Index(fields=['product', 'warehouse'], name='warehouse_i_product_e7212c_idx'),
        ),
        migrations.AddIndex(
            model_name='warehouseinventory',
            index=models.Index(fields=['batch_number'], name='warehouse_i_batch_n_fda8fe_idx'),
        ),
        migrations.AddIndex(
            model_name='warehouseinventory',
            index=models.Index(fields=['expiry_date'], name='warehouse_i_expiry__21ffb6_idx'),
        ),
        migrations.AddIndex(
            model_name='warehouseinventory',
            index=models.Index(fields=['quality_status'], name='warehouse_i_quality_6eb657_idx'),
        ),
        migrations.AddIndex(
            model_name='temperaturelog',
            index=models.Index(fields=['warehouse', 'recorded_at'], name='temperature_warehou_50e0ad_idx'),
        ),
        migrations.AddIndex(
            model_name='temperaturelog',
            index=models.Index(fields=['zone', 'recorded_at'], name='temperature_zone_id_d51337_idx'),
        ),
        migrations.AddIndex(
            model_name='temperaturelog',
            index=models.Index(fields=['alert_triggered'], name='temperature_alert_t_2fb63f_idx'),
        ),
    ]
