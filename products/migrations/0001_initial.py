# Generated by Django 5.1.6 on 2025-07-04 03:09

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='categories/')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='products.category')),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'db_table': 'product_categories',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('product_type', models.CharField(choices=[('raw', 'Raw Agricultural Product'), ('processed', 'Processed Product')], max_length=20)),
                ('organic_status', models.CharField(choices=[('organic', 'Organic Certified'), ('non_organic', 'Non-Organic'), ('transitional', 'Transitional to Organic')], default='non_organic', max_length=20)),
                ('price_per_unit', models.DecimalField(decimal_places=2, max_digits=10)),
                ('unit', models.CharField(choices=[('kg', 'Kilograms'), ('g', 'Grams'), ('tons', 'Metric Tons'), ('pieces', 'Pieces'), ('bunches', 'Bunches'), ('bags', 'Bags'), ('liters', 'Liters'), ('ml', 'Milliliters')], default='kg', max_length=20)),
                ('minimum_order_quantity', models.DecimalField(decimal_places=2, default=1, max_digits=10)),
                ('stock_quantity', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('harvest_date', models.DateField(blank=True, null=True)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('processing_date', models.DateField(blank=True, null=True)),
                ('origin_country', models.CharField(default='Ghana', max_length=100)),
                ('origin_region', models.CharField(blank=True, max_length=100)),
                ('origin_city', models.CharField(blank=True, max_length=100)),
                ('quality_grade', models.CharField(blank=True, max_length=10)),
                ('certifications', models.JSONField(blank=True, default=list)),
                ('featured_image', models.ImageField(blank=True, null=True, upload_to='products/')),
                ('additional_images', models.JSONField(blank=True, default=list)),
                ('raw_materials', models.JSONField(blank=True, default=list)),
                ('processing_method', models.TextField(blank=True)),
                ('processing_facility', models.CharField(blank=True, max_length=200)),
                ('nutritional_info', models.JSONField(blank=True, default=dict)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('out_of_stock', 'Out of Stock'), ('discontinued', 'Discontinued')], default='draft', max_length=20)),
                ('is_featured', models.BooleanField(default=False)),
                ('slug', models.SlugField(blank=True, max_length=250, unique=True)),
                ('search_keywords', models.JSONField(blank=True, default=list)),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('orders_count', models.PositiveIntegerField(default=0)),
                ('blockchain_hash', models.CharField(blank=True, max_length=100)),
                ('blockchain_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='products.category')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'products',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Certification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('certification_type', models.CharField(choices=[('organic', 'Organic Certification'), ('quality', 'Quality Assurance'), ('safety', 'Food Safety'), ('fair_trade', 'Fair Trade'), ('rainforest', 'Rainforest Alliance'), ('global_gap', 'GlobalGAP'), ('halal', 'Halal Certification')], max_length=20)),
                ('certificate_number', models.CharField(max_length=100, unique=True)),
                ('issuing_body', models.CharField(max_length=200)),
                ('issue_date', models.DateField()),
                ('expiry_date', models.DateField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('verification_documents', models.JSONField(blank=True, default=list)),
                ('blockchain_hash', models.CharField(blank=True, max_length=100)),
                ('blockchain_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_certifications', to='products.product')),
            ],
            options={
                'db_table': 'product_certifications',
            },
        ),
        migrations.CreateModel(
            name='ProductAttribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('value', models.CharField(max_length=200)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attributes', to='products.product')),
            ],
            options={
                'db_table': 'product_attributes',
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='products/gallery/')),
                ('alt_text', models.CharField(blank=True, max_length=200)),
                ('is_primary', models.BooleanField(default=False)),
                ('sort_order', models.PositiveIntegerField(default=0)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='products.product')),
            ],
            options={
                'db_table': 'product_images',
                'ordering': ['sort_order'],
            },
        ),
        migrations.CreateModel(
            name='ProductVariation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('price_per_unit', models.DecimalField(decimal_places=2, max_digits=10)),
                ('unit', models.CharField(choices=[('kg', 'Kilograms'), ('g', 'Grams'), ('tons', 'Metric Tons'), ('pieces', 'Pieces'), ('bunches', 'Bunches'), ('bags', 'Bags'), ('liters', 'Liters'), ('ml', 'Milliliters')], max_length=20)),
                ('minimum_order_quantity', models.DecimalField(decimal_places=2, default=1, max_digits=10)),
                ('stock_quantity', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('is_active', models.BooleanField(default=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variations', to='products.product')),
            ],
            options={
                'db_table': 'product_variations',
            },
        ),
        migrations.CreateModel(
            name='TraceabilityRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('stage', models.CharField(choices=[('planting', 'Planting'), ('growing', 'Growing'), ('harvesting', 'Harvesting'), ('post_harvest', 'Post-Harvest Handling'), ('processing', 'Processing'), ('packaging', 'Packaging'), ('storage', 'Storage'), ('transport', 'Transportation'), ('retail', 'Retail')], max_length=20)),
                ('location', models.CharField(max_length=200)),
                ('timestamp', models.DateTimeField()),
                ('description', models.TextField()),
                ('data', models.JSONField(blank=True, default=dict)),
                ('temperature', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('humidity', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('quality_score', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('blockchain_hash', models.CharField(blank=True, max_length=100)),
                ('blockchain_verified', models.BooleanField(default=False)),
                ('images', models.JSONField(blank=True, default=list)),
                ('documents', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('actor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='traceability_records', to='products.product')),
            ],
            options={
                'db_table': 'traceability_records',
                'ordering': ['timestamp'],
            },
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category', 'product_type', 'organic_status'], name='products_categor_8178aa_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['seller', 'status'], name='products_seller__87e71e_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['origin_country', 'origin_region'], name='products_origin__57f0e0_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['price_per_unit'], name='products_price_p_29719e_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['created_at'], name='products_created_e1ba5f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='certification',
            unique_together={('product', 'certification_type', 'certificate_number')},
        ),
        migrations.AlterUniqueTogether(
            name='productattribute',
            unique_together={('product', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='productvariation',
            unique_together={('product', 'name')},
        ),
    ]
